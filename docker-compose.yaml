version: '3.5'
#TODO expose GRPC ports
services:
  order_service:
    build:
      context: ./order-service
      dockerfile: ./docker/Dockerfile
    container_name: order-service
    depends_on:
      user_service:
        condition: service_healthy
      product_service:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      HEALTHCHECK_URL: http://localhost:8080/actuator/health
      SPRING_PROFILES_ACTIVE: local

  user_service:
    build:
      context: ./user-service
      dockerfile: ./docker/Dockerfile
    container_name: user-service
    hostname: userservice
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - 8092:8092
    environment:
      HEALTHCHECK_URL: http://localhost:8092/actuator/health
      SPRING_PROFILES_ACTIVE: local

  product_service:
    build:
      context: ./product-service
      dockerfile: ./docker/Dockerfile
    container_name: product-service
    hostname: productservice
    depends_on:
      mongo_db:
        condition: service_healthy
    ports:
      - 8091:8091
    environment:
      HEALTHCHECK_URL: http://localhost:8091/actuator/health
      SPRING_PROFILES_ACTIVE: local

  mongo_db:
    image: mongo
    restart: always
    ports:
    - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: "productdb"
      MONGO_INITDB_ROOT_USERNAME: "kistik"
      MONGO_INITDB_ROOT_PASSWORD: "pass"
    volumes:
    - ./mongo_data:/data/db/
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo_db:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres_db:
    image: postgres:13.3
    environment:
      POSTGRES_DB: "postgresdb"
      POSTGRES_USER: "kistik"
      POSTGRES_PASSWORD: "pass"
#      PGDATA: "./pg_data"
    volumes:
#     ENTRY_POINT SCRIPT
#      - ./user-service/src/main/resources/init:/docker-entrypoint-initdb.d
      - ./pg_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kistik -d postgresdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  liquibase_migration:
    image: liquibase/liquibase:4.7.0
    container_name: liquibase_migration
    command: liquibase --url="jdbc:postgresql://postgres_db:5432/postgresdb?user=kistik&password=pass" --changeLogFile=changelog/changelog.xml update
    volumes:
    - ./db_migration:/liquibase/changelog
    depends_on:
      postgres_db:
        condition: service_healthy
